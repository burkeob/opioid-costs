str_detect(Counties, "ALL COUNTIES|ALL OTHER COUNTIES")) %>%
pull(GPCI))
}
}
# for each county in the US, attempt to read GPCI
medical_cost_index <- county.regions %>%
select(region, county.name, state.name) %>%
rowwise() %>%
mutate(medical_cost = find_gpci(county.name, state.name)) %>%
ungroup %>%
select(region, medical_cost)
#### Opioid Addiction Rates {#addiction}
Opioid addiction rate data come from the [Substance Abuse and Mental Health Services Administration](https://www.samhsa.gov/data/taxonomy/term/6555) (SAMHSA). We use non-medical use of pain relievers data at the sub-state/metro area level from 2012-2014. The 2012-2014 NSDUH Sub-state Region Estimates are available [here](https://www.samhsa.gov/data/report/2012-2014-nsduh-substate-region-estimates-%E2%80%93-excel-tables-and-csv-files). The data for our analysis come from Table 8. Relevant variables include:
* Fraction of individuals using pain relievers for nonmedical use
The following code maps sub-state areas to counties;
```{r, opioid.addiction}
# This crosswalk maps substate regions to county fips codes
addiction_xwalk1 <- read.sas7bdat("../data/substate_county121314.sas7bdat") %>% tbl_df %>%
select(sbst14n, state, county) %>%
mutate(county_fips = state * 1000 + county)
#### Criminal Justice Costs {#criminal}
Criminal justice cost data are available from the [Bureau of Justice](https://www.bjs.gov/index.cfm?ty=pbse&sid=33). We use the 2012 preliminary file for our analysis. The data are at the state level-- in order to estimate county-level criminal justice costs associated with the opioid crisis, we assign weights to counties proportionally to the number of individuals who use pain relievers for nonmedical use. This code can be found in the section [Creating County-Level Estimates]. Relevant variables include:
* State-level criminal costs per capita.
#### Hospitalization Costs
Hospitalization cost data come from the [Agency for Healthcare Reserach and Quality](https://hcupnet.ahrq.gov/#setup). The data can be accessed through the "Community" statistics link when creating a custom data table. Our state-level data are for year 2014, and are at the county level. We focus on the "Stays for Alcohol and Other Drugs" diagnosis. Relevant variables include:
* total hospitalization costs: stays for alcohol/other drugs
* total discharges: stays for alcohol/other drugs
* mean costs: stays for alcohol/other drugs
#### County/State Covariates {#income}
We derive our county- and state- level demographic controls from the American Community Survey. We use data from the 2016 5-year survey. Relevant variables include:
* Population
* Working age population
* Educational attainment
* Race
Our county- and state- level income data come from the U.S. Census Bureau, Small Area Income and Poverty Estimates (SAIPE) Program. We use [income data from 2016](https://www.census.gov/data/datasets/2016/demo/saipe/2016-state-and-county.html) in our analysis. Relevant variables include:
* Income
We control for urban/rural status when predicting county-wide mortality costs. We obtain data on the fraction of each county's 2010 population living in a rural area from [American FactFinder](https://factfinder.census.gov/bkmk/table/1.0/en/DEC/10_SF1/P2/0400000US01.14000). Relevant variables include:
* Fraction of the population living in rural areas
```{r, county.demographics}
# population by county
population <- get_acs(geography = "county",
variables = c(population = "B01003_001"),
survey = "acs5",
year = 2016) %>%
mutate(region = GEOID %>% as.numeric,
total_population = estimate) %>%
select(region, total_population)
# population by county
population <- get_acs(geography = "county",
variables = c(population = "B01003_001"),
survey = "acs5",
year = 2016) %>%
mutate(region = GEOID %>% as.numeric,
total_population = estimate) %>%
select(region, total_population)
# working age population by county
workers <- get_acs(geography = "county",
variables = c(m2534 = "B15001_011", # get males and females aged 25 through 64
m3544 = "B15001_019",
m4564 = "B15001_027",
f2534 = "B15001_052",
f3544 = "B15001_060",
f4564 = "B15001_068"),
survey = "acs5",
year = 2016) %>%
group_by(GEOID) %>%
summarise(working_population = sum(estimate, na.rm = T)) %>% #sum population by GEOID (county)
mutate(region = GEOID %>% as.numeric) %>%
select(region, working_population) %>% ungroup
# educational attainment by county
educational_attainment <- get_acs("county",
variables = c("B06009_001", "B06009_002", "B06009_003"),  year = 2016, survey = "acs5") %>%
group_by(GEOID) %>%
summarise(pct_no_hs = estimate[2]/estimate[1],
pct_hs = estimate[3]/estimate[1],
pct_college = 1 - pct_no_hs - pct_hs) %>%
rename(region = GEOID) %>%
mutate(region = region %>% as.numeric)
# Urban/rural status by county -- check where this comes from
urban_rural <- read_excel("../data/percent_rural.xlsx") %>%
mutate(region = GEOID %>% as.numeric,
percent_rural = `2010 Census \r\nPercent Rural`) %>%
select(region, percent_rural)
# Racial breakdown by county
race <- get_acs(geography = "county",
variables = c(total_population = "B03002_001",
black_alone_not_hispanic = "B03002_004",
hispanic_all_races = "B03002_012"),
survey = "acs5", year = 2016) %>%
group_by(GEOID) %>%
summarise(percent_black = estimate[2]/estimate[1] * 100,
percent_hispanic = estimate[3]/estimate[1] * 100) %>%
mutate(region = GEOID %>% as.numeric) %>%
select(region, percent_black, percent_hispanic)
# Population by state
st_population <- get_acs(geography = "state",
variables = c(population = "B01003_001"),
survey = "acs5",
year = 2016) %>%
mutate(region = NAME %>% tolower,
total_population = estimate) %>%
select(region, total_population)
# Workers by state
st_workers <- get_acs(geography = "state",
variables = c(m2534 = "B15001_011",
m3544 = "B15001_019",
m4564 = "B15001_027",
f2534 = "B15001_052",
f3544 = "B15001_060",
f4564 = "B15001_068"),
survey = "acs5",
year = 2016) %>%
group_by(GEOID) %>%
summarise(working_population = sum(estimate, na.rm = T)) %>%
rename(region = GEOID) %>% ungroup
# Workers by state
st_workers <- get_acs(geography = "state",
variables = c(m2534 = "B15001_011",
m3544 = "B15001_019",
m4564 = "B15001_027",
f2534 = "B15001_052",
f3544 = "B15001_060",
f4564 = "B15001_068"),
survey = "acs5",
year = 2016) %>%
group_by(GEOID) %>%
summarise(working_population = sum(estimate, na.rm = T)) %>%
rename(region = GEOID) %>% ungroup
# Income by county -- comes from census
income <- read_excel("../data/est16all.xls", skip = 3) %>% select(`State FIPS Code`, `County FIPS Code`, `Median Household Income`)
# Income by state
med_income <- income %>% mutate(med_income = `Median Household Income` %>% as.numeric,
region = str_c(`State FIPS Code`, `County FIPS Code`) %>% as.numeric) %>%
right_join(county.regions) %>% select(region, med_income)
# County fips code 000 corresponds to state-level stats
st_income <- income %>% filter(`County FIPS Code` == "000") %>%
mutate(st_med_income = `Median Household Income` %>% as.numeric,
fips.character = `State FIPS Code`) %>%
right_join(state.regions) %>%
select(region, st_med_income)
# merge county-level demographic data
demographics <- county.regions %>%
select(region) %>%
left_join(population) %>%
left_join(workers) %>%
left_join(race) %>%
left_join(med_income) %>%
left_join(urban_rural) %>%
left_join(educational_attainment) %>% tbl_df
# merge county-level demographic data
demographics <- county.regions %>%
select(region) %>%
left_join(population) %>%
left_join(workers) %>%
left_join(race) %>%
left_join(med_income) %>%
left_join(urban_rural) %>%
left_join(educational_attainment) %>% tbl_df
# merge state-level demographic data
st_demographics <- state.regions %>%
select(region, fips.character) %>%
left_join(st_income) %>%
left_join(st_population) %>%
left_join(st_workers)
hosp_regressors_cy1 = c("Log of Total Population",
"Log of Opioid Deaths",
"Critical Care Fee Schedule",
"Log of Non-Medical Pain Reliever Use",
"Log of Overall Drug Deaths",
"State Random Effect"
)
hosp_regressors_cy2 <- c(hosp_regressors_cy1[-2], "")
hosp_regressors_cy3 <- c(hosp_regressors_cy2[-4], "")
hosp_reg_table_cy <- data.frame(Response = c("Log of Hospitalization Costs",
rep("", times = length(hosp_regressors_cy1) - 1)),
Model1 = hosp_regressors_cy1,
Model2 = hosp_regressors_cy2,
Model3 = hosp_regressors_cy3
)
# County-level hospitalization costs
county_hosp_costs <- hospitalization_costs %>% filter(region_name != "State Total") %>%
mutate(county.name = region_name %>% tolower %>% str_trim,
state.name = state_name %>% tolower %>% str_trim) %>%
right_join(county.regions)
# State-level hospitalization costs
state_hosp_costs <- state_hosp_costs %>% right_join(state.regions) %>% rename(state.name = region)
# data for county-level hospitalization cost regressions
hosp_costs_model <- county_hosp_costs %>%
left_join(medical_cost_index) %>%
left_join(nonmedical_use) %>%
left_join(demographics) %>%
left_join(opioid_deaths) %>%
left_join(drug_deaths) %>%
mutate(log_total_hosp_costs = log(total_costs),
log_population = log(total_population),
log_nonmedical_use_count = log(total_population/1000 * nonmedical_use_pct),
log_opioid_deaths = log(opioid_deaths),
log_drug_deaths_mcd = log(drug_deaths_mcd))
# mixed-effects linear regression with state random effects--counties with opioid-related deaths
h1 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + log_opioid_deaths + log_drug_deaths_mcd + (1|state.fips.character), data = hosp_costs_model)
# adjustment factor NEED TO ASK ABOUT THIS
h1_adj = sum(exp(resid(h1)))/(length(resid(h1)) - 7)
# mixed-effects linear regression with state random effects--counties with only drug deaths
h2 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + log_drug_deaths_mcd + (1|state.fips.character), data = hosp_costs_model)
h2_adj = sum(exp(resid(h2)))/(length(resid(h2)) - 6)
# mixed-effects linear regression with state random effects--counties without opioid/general drug death data
h3 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + (1|state.fips.character), data = hosp_costs_model)
h3_adj = sum(exp(resid(h3)))/(length(resid(h3)) - 5)
### State-level hospitalization cost data
# State-level opioid death data-- for use in linear regression
state_opioid_deaths <- read_tsv("../data/State Opioid Deaths 2016 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(State)) %>%
mutate(state.fips.character = `State Code`,
state_opioid_deaths = Deaths) %>%
select(state.fips.character, state_opioid_deaths)
### State-level hospitalization cost data
# State-level opioid death data-- for use in linear regression
state_opioid_deaths <- read_tsv("../data/State Opioid Deaths 2016 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(State)) %>%
mutate(state.fips.character = `State Code`,
state_opioid_deaths = Deaths) %>%
select(state.fips.character, state_opioid_deaths)
### State-level hospitalization cost data
# State-level opioid death data-- for use in linear regression
state_opioid_deaths <- read_tsv("../data/State Opioid Deaths 2018 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(State)) %>%
mutate(state.fips.character = `State Code`,
state_opioid_deaths = Deaths) %>%
select(state.fips.character, state_opioid_deaths)
### State-level hospitalization cost data
# State-level opioid death data-- for use in linear regression
state_opioid_deaths <- read_tsv("../data/State Opioid Deaths 2017 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(State)) %>%
mutate(state.fips.character = `State Code`,
state_opioid_deaths = Deaths) %>%
select(state.fips.character, state_opioid_deaths)
# Multiple cause of death data: opioid-related deaths
opioid_deaths <- read_tsv("../data/Opioid Deaths 2017 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(County)) %>%
mutate(region = `County Code` %>% as.numeric,
opioid_deaths = Deaths) %>%
select(region, opioid_deaths)
# Underlying cause of death data: drug deaths
drug_deaths_ucd <- read_tsv("../data/Drug Deaths 2017 - UCD.txt") %>%
filter(!is.na(`County Code`)) %>%
mutate(region = `County Code` %>% as.numeric,
drug_deaths_ucd = Deaths) %>%
select(region, drug_deaths_ucd)
# Combine drug death data
drug_deaths <- county.regions %>% select(region) %>%
left_join(drug_deaths_ucd) %>%
left_join(drug_deaths_mcd)
# Combine drug death data
drug_deaths <- county.regions %>% select(region) %>%
left_join(drug_deaths_ucd) %>%
left_join(drug_deaths_mcd)
#### GPCI by County {#costs}
Data on health care costs come from the Centers for [Medicare & Medicaid Services](https://www.cms.gov/apps/physician-fee-schedule/overview.aspx). CMS offers a Physician Fee Schedule look-up tool; we use data on the 2018 Geographic Practice Cost Index (GPCI) for services covered by the Medicare Physician Fee Schedule. Relevant variables include:
* Medical cost (GPCI)
```{r, gpci}
# read in GPCI geographic crosswalk
gpci_xwalk <- read_excel("../data/gpci_county_xwalk.xlsx", skip = 1) %>%
filter(!is.na(`Carrier Number`)) %>%
filter(!row_number() == n()) %>% #drop last row
fill(State) %>% #fill states forward
mutate(`MAC LOCALITY` = str_c(`Carrier Number`, `Locality Number`) %>% as.numeric)
# GPCI data
gpci_level <- read_csv("../data/gpci_2018.csv") %>%
select(`MAC LOCALITY`, `GPCI WORK`, `GPCI PE`, `GPCI MP`) %>%
mutate(GPCI = 4.5 * `GPCI WORK` + 1.42 * `GPCI PE` + 0.38 * `GPCI MP`) %>%
right_join(gpci_xwalk) %>%
mutate(State = ifelse(State == "HAWAII/GUAM", "HAWAII", State)) %>%
unique
# function to get medical cost values
find_gpci = function(county, state) {
out <- gpci_level %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else { # otherwise pull all counties/other counties value
return(gpci_level %>% filter(State %>% tolower == state,
str_detect(Counties, "ALL COUNTIES|ALL OTHER COUNTIES")) %>%
pull(GPCI))
}
}
# for each county in the US, attempt to read GPCI
medical_cost_index <- county.regions %>%
select(region, county.name, state.name) %>%
rowwise() %>%
mutate(medical_cost = find_gpci(county.name, state.name)) %>%
ungroup %>%
select(region, medical_cost)
hosp_regressors_cy1 = c("Log of Total Population",
"Log of Opioid Deaths",
"Critical Care Fee Schedule",
"Log of Non-Medical Pain Reliever Use",
"Log of Overall Drug Deaths",
"State Random Effect"
)
hosp_regressors_cy3 <- c(hosp_regressors_cy2[-4], "")
hosp_reg_table_cy <- data.frame(Response = c("Log of Hospitalization Costs",
rep("", times = length(hosp_regressors_cy1) - 1)),
Model1 = hosp_regressors_cy1,
Model2 = hosp_regressors_cy2,
Model3 = hosp_regressors_cy3
)
# County-level hospitalization costs
county_hosp_costs <- hospitalization_costs %>% filter(region_name != "State Total") %>%
mutate(county.name = region_name %>% tolower %>% str_trim,
state.name = state_name %>% tolower %>% str_trim) %>%
right_join(county.regions)
# State-level hospitalization costs
state_hosp_costs <- state_hosp_costs %>% right_join(state.regions) %>% rename(state.name = region)
# Merge data NOTE: do we need this? I can't find it referenced later in the code
# hosp_costs <- county_hosp_costs %>% left_join(state_hosp_costs) %>% left_join(demographics) %>%
#   left_join(st_demographics %>% rename(state.name = region, total_st_population = total_population))
# data for county-level hospitalization cost regressions
hosp_costs_model <- county_hosp_costs %>%
left_join(medical_cost_index) %>%
left_join(nonmedical_use) %>%
left_join(demographics) %>%
left_join(opioid_deaths) %>%
left_join(drug_deaths) %>%
mutate(log_total_hosp_costs = log(total_costs),
log_population = log(total_population),
log_nonmedical_use_count = log(total_population/1000 * nonmedical_use_pct),
log_opioid_deaths = log(opioid_deaths),
log_drug_deaths_mcd = log(drug_deaths_mcd))
# mixed-effects linear regression with state random effects--counties with opioid-related deaths
h1 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + log_opioid_deaths + log_drug_deaths_mcd + (1|state.fips.character), data = hosp_costs_model)
# adjustment factor NEED TO ASK ABOUT THIS
h1_adj = sum(exp(resid(h1)))/(length(resid(h1)) - 7)
# mixed-effects linear regression with state random effects--counties with only drug deaths
h2 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + log_drug_deaths_mcd + (1|state.fips.character), data = hosp_costs_model)
h2_adj = sum(exp(resid(h2)))/(length(resid(h2)) - 6)
# mixed-effects linear regression with state random effects--counties without opioid/general drug death data
h3 <- lmer(log_total_hosp_costs ~ medical_cost + log_nonmedical_use_count + log_population + (1|state.fips.character), data = hosp_costs_model)
h3_adj = sum(exp(resid(h3)))/(length(resid(h3)) - 5)
### State-level hospitalization cost data
# State-level opioid death data-- for use in linear regression
state_opioid_deaths <- read_tsv("../data/State Opioid Deaths 2017 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(State)) %>%
mutate(state.fips.character = `State Code`,
state_opioid_deaths = Deaths) %>%
select(state.fips.character, state_opioid_deaths)
# opioid medical cost data -- outcome of interest in regression
state_medical_costs <- medical_cost_index %>% left_join(demographics) %>%
left_join(county.regions %>% select(region, state.fips.character)) %>%
group_by(state.fips.character) %>%
summarise(medical_cost = sum(total_population/sum(total_population, na.rm = T) * medical_cost, na.rm = T))
# data for state-level regressions
state_hosp_costs_model <- state_hosp_costs %>%
left_join(st_demographics) %>%
left_join(state_opioid_deaths %>% rename(fips.character = state.fips.character)) %>%
left_join(state_medical_costs %>% rename(fips.character = state.fips.character)) %>%
mutate(log_hospital_costs = log(state_total_costs),
log_total_population = log(total_population),
log_mean_cost = log(state_mean_costs),
log_opioid_deaths = log(state_opioid_deaths),
log_income = log(st_med_income))
# data for state-level regressions
state_hosp_costs_model <- state_hosp_costs %>%
left_join(st_demographics) %>%
left_join(state_opioid_deaths %>% rename(fips.character = state.fips.character)) %>%
left_join(state_medical_costs %>% rename(fips.character = state.fips.character)) %>%
mutate(log_hospital_costs = log(state_total_costs),
log_total_population = log(total_population),
log_mean_cost = log(state_mean_costs),
log_opioid_deaths = log(state_opioid_deaths),
log_income = log(st_med_income))
View(st_workers)
View(state_hosp_costs)
state_hosp_costs_model <- state_hosp_costs %>%
left_join(st_demographics) %>%
left_join(state_opioid_deaths %>% rename(fips.character = state.fips.character))
state_hosp_costs_model <- state_hosp_costs %>%
left_join(st_demographics)
require(mosaic)   # Load additional packages here
require(dplyr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
costdt <- read_excel("../data/CEA_Estimates.xlsx")
# read in county and states from the choroplethrMaps package
data(county.regions)
data(state.regions)
# Multiple cause of death data: opioid-related deaths
opioid_deaths <- read_tsv("../data/Opioid Deaths 2017 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(County)) %>%
mutate(region = `County Code` %>% as.numeric,
opioid_deaths = Deaths) %>%
select(region, opioid_deaths)
# Underlying cause of death data: drug deaths
drug_deaths_ucd <- read_tsv("../data/Drug Deaths 2017 - UCD.txt") %>%
filter(!is.na(`County Code`)) %>%
mutate(region = `County Code` %>% as.numeric,
drug_deaths_ucd = Deaths) %>%
select(region, drug_deaths_ucd)
# Multiple cause of death data: drug deaths
drug_deaths_mcd <- read_tsv("../data/Drug Deaths 2017 - MCD.txt") %>%
filter(!is.na(`County Code`)) %>%
mutate(region = `County Code` %>% as.numeric,
drug_deaths_mcd = Deaths) %>%
select(region, drug_deaths_mcd)
# Combine drug death data
drug_deaths <- county.regions %>% select(region) %>%
left_join(drug_deaths_ucd) %>%
left_join(drug_deaths_mcd)
# read in GPCI geographic crosswalk
gpci_xwalk <- read_excel("../data/gpci_county_xwalk.xlsx", skip = 1) %>%
filter(!is.na(`Carrier Number`)) %>%
filter(!row_number() == n()) %>% #drop last row
fill(State) %>% #fill states forward
mutate(`MAC LOCALITY` = str_c(`Carrier Number`, `Locality Number`) %>% as.numeric)
# GPCI data
gpci_level_2018 <- read_csv("../data/gpci_2018.csv") %>%
select(`MAC LOCALITY`, `GPCI WORK`, `GPCI PE`, `GPCI MP`) %>%
mutate(GPCI = 4.5 * `GPCI WORK` + 1.42 * `GPCI PE` + 0.38 * `GPCI MP`) %>%
right_join(gpci_xwalk) %>%
mutate(State = ifelse(State == "HAWAII/GUAM", "HAWAII", State)) %>%
unique
gpci_level_2019 <- read_csv("../data/gpci_2019.csv") %>%
select(`MAC LOCALITY`, `GPCI WORK`, `GPCI PE`, `GPCI MP`) %>%
mutate(GPCI = 4.5 * `GPCI WORK` + 1.42 * `GPCI PE` + 0.38 * `GPCI MP`) %>%
right_join(gpci_xwalk) %>%
mutate(State = ifelse(State == "HAWAII/GUAM", "HAWAII", State)) %>%
unique
View(gpci_level_2018)
# function to get medical cost values. Uses 2018 data if not available in 2019.
find_gpci = function(county, state) {
out <- gpci_level_2019 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else { # otherwise pull all counties/other counties value
out <- gpci_level_2019 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, "ALL COUNTIES|ALL OTHER COUNTIES"))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else{
out <- gpci_level_2018 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else{
out <- gpci_level_2019 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, "ALL COUNTIES|ALL OTHER COUNTIES"))
return(out %>% pull(GPCI))
}
}
}
}
# for each county in the US, attempt to read GPCI
medical_cost_index <- county.regions %>%
select(region, county.name, state.name) %>%
rowwise() %>%
mutate(medical_cost = find_gpci(county.name, state.name)) %>%
ungroup %>%
select(region, medical_cost)
# function to get medical cost values. Uses 2018 data if not available in 2019.
find_gpci = function(county, state) {
out <- gpci_level_2019 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else { # otherwise pull all counties/other counties value
out <- gpci_level_2019 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, "ALL COUNTIES|ALL OTHER COUNTIES"))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else{
out <- gpci_level_2018 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) { # if the county exists
return(out %>% pull(GPCI))
} else{
out <- gpci_level_2018 %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, "ALL COUNTIES|ALL OTHER COUNTIES"))
return(out %>% pull(GPCI))
}
}
}
}
# for each county in the US, attempt to read GPCI
medical_cost_index <- county.regions %>%
select(region, county.name, state.name) %>%
rowwise() %>%
mutate(medical_cost = find_gpci(county.name, state.name)) %>%
ungroup %>%
select(region, medical_cost)

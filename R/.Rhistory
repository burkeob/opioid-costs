data(county.regions)
data(state.regions)
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(county.regions)
data(state.regions)
opioid_deaths <- read_tsv("../data/Opioid Deaths 2016 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(County)) %>%
mutate(region = `County Code` %>% as.numeric,
opioid_deaths = Deaths) %>%
select(region, opioid_deaths)
gpci_xwalk <- read_excel("../data/gpci_county_xwalk.xlsx", skip = 1) %>%
filter(!is.na(`Carrier Number`)) %>%
filter(!row_number() == n()) %>%
fill(State) %>%
mutate(`MAC LOCALITY` = str_c(`Carrier Number`, `Locality Number`) %>% as.numeric)
gpci_level <- read_csv("../data/gpci_2018.csv") %>%
select(`MAC LOCALITY`, `GPCI WORK`, `GPCI PE`, `GPCI MP`) %>%
mutate(GPCI = 4.5 * `GPCI WORK` + 1.42 * `GPCI PE` + 0.38 * `GPCI MP`) %>%
right_join(gpci_xwalk) %>%
mutate(State = ifelse(State == "HAWAII/GUAM", "HAWAII", State)) %>%
unique
# Code 99291: RVU WORK = 4.5, RVU PE = 1.42. RVU MP = 0.38 FROM CMS
find_gpci = function(county, state) {
out <- gpci_level %>% filter(str_detect(State %>% tolower, state),
str_detect(Counties %>% tolower, county))
if (nrow(out) == 1) {
return(out %>% pull(GPCI))
} else {
return(gpci_level %>% filter(State %>% tolower == state,
str_detect(Counties, "ALL COUNTIES|ALL OTHER COUNTIES")) %>%
pull(GPCI))
}
}
medical_cost_index <- county.regions %>%
select(region, county.name, state.name) %>%
rowwise() %>%
mutate(medical_cost = find_gpci(county.name, state.name)) %>%
ungroup %>%
select(region, medical_cost)
opioid_deaths <- read_tsv("../data/Opioid Deaths 2016 - MCD.txt") %>%
select(-Notes) %>%
filter(!is.na(County)) %>%
mutate(region = `County Code` %>% as.numeric,
opioid_deaths = Deaths) %>%
select(region, opioid_deaths)
View(gpci_xwalk)
View(opioid_data)
View(opioid_deaths)
data(county.regions)
data(state.regions)
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
View(d)
data(county.regions)
data(state.regions)
help state
help(state.abb)
state.abb
county.regions
data(county.regions)
county.list
require(tidycensus)
county.list
county.regions
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(tidycensus)
require(lme4)
require(ggplot2)
library(RColorBrewer)
county.regions
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
county.regions
source('process_hospitalizations.R')
county.regions
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(county.regions)
county.regions
data(county.region)
require(mosaic)   # Load additional packages here
data(county.region)
require(dplyr)
data(county.region)
require(readr)
require(readxl)
require(tidyr)
require(tidyr)
require(stringr)
require(sas7bdat)
require(tidycensus)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
data(county.regions)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
data(county.regions)
source('process_hospitalizations.R')
data(county.regions)
data(state.regions)
data(county.regions)
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(county.regions)
data(county.regions)
data(state.regions)
data(county.regions)
data(state.regions)
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(county.regions)
data(state.regions)
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
files <- list.files("../data/Hospitalization")
files <- files[str_detect(files, ".csv")]
files
d <- tibble(location = character(),
discharges = character(),
discharge_rate = character(),
mean_costs = character(),
total_costs = character(),
per_capita_costs = character())
View(d)
for (i in 1:length(files)) {
d. <- read_csv(str_c("../data/Hospitalization/", files[i]))
names(d.)[1] <- 'X1'
county_names <- d. %>% filter(str_detect(X1, '2014')) %>% slice(-1) %>% pull(X1)
if (ncol(d.) == 10) {
opioid_data <- d. %>% filter(str_detect(X2, 'Opioids')) %>% select(X3:X4, X8:X10)
out <- tibble(location = county_names,
discharges = opioid_data %>% pull(X3),
discharge_rate = opioid_data %>% pull(X4),
mean_costs = opioid_data %>% pull(X8),
total_costs = opioid_data %>% pull(X9),
per_capita_costs = opioid_data %>% pull(X10))
} else if (ncol(d.) == 7)  {
opioid_data <- d. %>% filter(str_detect(X2, 'Opioids')) %>% select(X3:X7)
out <- tibble(location = county_names,
discharges = opioid_data %>% pull(X3),
discharge_rate = opioid_data %>% pull(X4),
mean_costs = opioid_data %>% pull(X5),
total_costs = opioid_data %>% pull(X6),
per_capita_costs = opioid_data %>% pull(X7))
}
d <- d %>% bind_rows(out)
}
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
files <- list.files("../data/Hospitalization")
files <- files[str_detect(files, ".csv")]
source('C:/Users/derrick.choe/Dropbox/Opioids_DC_copy/replication/R/process_hospitalizations.R', echo=TRUE)
# set working directory to folder
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# set working directory to folder
this.dir <- dirname(parent.frame(1)$ofile)
# set working directory to folder
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
files <- list.files("../data/Hospitalization")
files <- files[str_detect(files, ".csv")]
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
# this function calls the "process_hospitalizations.R" code, which cleans the hospitalization data (see code for comments)
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
# this function calls the "process_hospitalizations.R" code, which cleans the hospitalization data (see code for comments)
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
data(county.regions)
data(state.regions)
require(mosaic)   # Load additional packages here
require(dplyr)
require(readr)
require(readxl)
require(tidyr)
require(stringr)
require(choroplethr)
require(choroplethrMaps)
require(sas7bdat)
require(tidycensus)
require(lme4)
require(glmmTMB)
require(ggplot2)
library(RColorBrewer)
census_api_key('69d9f9e5add214b53a97d01d26fbec5051720528')
# this function calls the "process_hospitalizations.R" code, which cleans the hospitalization data (see code for comments)
source('process_hospitalizations.R')
# Some customization.  You can alter or delete as desired (if you know what you are doing).
# trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
getwd
getwd()
getwd()
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
files <- list.files("../data/Hospitalization")
files <- files[str_detect(files, ".csv")]
files
open(files[1])
read_csv(filese[1])
read_csv(files[1])
read_csv("../data/" + files[1])
read_csv("../data/" files[1])
read_csv(str_c("../data/" files[1]))
read_csv(str_c("../data/", files[1]))
read_csv(str_c("../data/Hospitalization", files[1]))
read_csv(str_c("../data/Hospitalization/", files[1]))
test <- read_csv(str_c("../data/Hospitalization/", files[1]))
test
names(test)
View(test)
test <- read_csv(str_c("../data/Hospitalization/", files[10]))
test <- read_csv(str_c("../data/Hospitalization/", files[16]))
files[16]
View(test)
test7 <- read_csv(str_c("../data/Hospitalization/", files[10]))
View(test7)
for (i in 1:length(files)) {
d. <- read_csv(str_c("../data/Hospitalization/", files[i]))
names(d.)[1] <- 'X1' # assign first column name X1
county_names <- d. %>% filter(str_detect(X1, '2014')) %>% slice(-1) %>% pull(X1)
if (ncol(d.) == 10) {
opioid_data <- d. %>% filter(str_detect(X2, 'Opioids')) %>% select(X3:X4, X8:X10)
out <- tibble(location = county_names,
discharges = opioid_data %>% pull(X3),
discharge_rate = opioid_data %>% pull(X4),
mean_costs = opioid_data %>% pull(X8),
total_costs = opioid_data %>% pull(X9),
per_capita_costs = opioid_data %>% pull(X10))
} else if (ncol(d.) == 7)  {
opioid_data <- d. %>% filter(str_detect(X2, 'Opioids')) %>% select(X3:X7)
out <- tibble(location = county_names,
discharges = opioid_data %>% pull(X3),
discharge_rate = opioid_data %>% pull(X4),
mean_costs = opioid_data %>% pull(X5),
total_costs = opioid_data %>% pull(X6),
per_capita_costs = opioid_data %>% pull(X7))
}
d <- d %>% bind_rows(out)
}
library(dplyr)
library(stringr)
library(tidyr)
library(readr)
files <- list.files("../data/Hospitalization")
files <- files[str_detect(files, ".csv")]
# try one out
d <- tibble(location = character(),
discharges = character(),
discharge_rate = character(),
mean_costs = character(),
total_costs = character(),
per_capita_costs = character())
test7 <- read_csv(str_c("../data/Hospitalization/", files[10]))
filter(str_detect(X1, '2014'))
filter(test7, str_detect(X1, '2014'))
names(test7)
names(test7)[1] <- "X1"
filter(test7, str_detect(X1, '2014'))
filter(test7, str_detect(X1, '2014')) %>% slice(-1)
